// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_12_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",12,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_1[] = {
	(int)120,
};
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)73,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_22_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",22,0xa27fc9dd)

void Player_obj::__construct(::hx::Null< int >  __o_w,::hx::Null< int >  __o_l){
            		int w = __o_w.Default(408);
            		int l = __o_l.Default(393);
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_12_new)
HXLINE(  13)		super::__construct(0,0,null());
HXLINE(  14)		this->loadGraphic(HX_("assets/images/BOYFRIEND.png",fa,3c,70,6c),true,w,l,null(),null());
HXLINE(  15)		this->screenCenter(null());
HXLINE(  16)		this->animation->add(HX_("idle",14,a7,b3,45),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_1,1),7,true,null(),null());
HXLINE(  17)		this->animation->add(HX_("up",5b,66,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,1),7,false,null(),null());
HXLINE(  18)		this->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x33e526a5) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x33e526a5;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_22_update)
HXLINE(  23)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  23)		if (_this->keyManager->checkStatus(38,_this->status)) {
HXLINE(  25)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/sounds/a.ogg",43,9f,04,13),1,false,null());
            		}
HXLINE(  28)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  28)		if (_this1->keyManager->checkStatus(40,_this1->status)) {
HXLINE(  30)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/sounds/o.mp3",72,41,9f,22),1,false,null());
            		}
HXLINE(  33)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  33)		if (_this2->keyManager->checkStatus(39,_this2->status)) {
HXLINE(  35)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/sounds/i.mp3",6c,c6,37,ae),1,false,null());
            		}
HXLINE(  38)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  38)		if (_this3->keyManager->checkStatus(37,_this3->status)) {
HXLINE(  40)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/sounds/e.mp3",68,74,9d,60),1,false,null());
            		}
HXLINE(  43)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  43)		bool _hx_tmp = _this4->keyManager->checkStatus(38,_this4->status);
HXLINE(  45)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< Player_obj > Player_obj::__new(::hx::Null< int >  __o_w,::hx::Null< int >  __o_l) {
	::hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_w,__o_l);
	return __this;
}

::hx::ObjectPtr< Player_obj > Player_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_w,::hx::Null< int >  __o_l) {
	Player_obj *__this = (Player_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_w,__o_l);
	return __this;
}

Player_obj::Player_obj()
{
}

::hx::Val Player_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Player_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Player",81,5f,4d,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Player_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

